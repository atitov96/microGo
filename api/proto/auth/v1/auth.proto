syntax = "proto3";

package api.proto.auth.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "microGo/gen/go/auth/v1;authv1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Auth Service API"
    version: "1.0"
    contact: {
      name: "Auth Service Team"
      email: "auth@example.com"
    }
    license: {name: "BSD 3-Clause License"}
  }
  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
};

service AuthService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Auth service operations"
    external_docs: {
      url: "https://example.com/auth"
      description: "Find out more about auth"
    }
  };

  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/v1/auth/register"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Register new user"
      description: "Register a new user with email and password"
      tags: ["auth"]
    };
  }

  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Login user"
      description: "Login with email and password"
      tags: ["auth"]
    };
  }

  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/validate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Validate token"
      description: "Validate token"
      tags: ["auth"]
    };
  }

  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/refresh-token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Refresh token"
      description: "Refresh token"
      tags: ["auth"]
    };
  }
}

message RegisterRequest {
  string email = 1 [(validate.rules).string = {
    email: true
    max_len: 100
  }];
  string password = 2 [(validate.rules).string = {
    min_len: 8
    max_len: 100
    pattern: "^[a-zA-Z0-9!@#$%^&*()]+$"
  }];
  string nickname = 3 [(validate.rules).string = {
    min_len: 3
    max_len: 50
  }];
}

message LoginRequest {
  string email = 1 [(validate.rules).string.email = true];
  string password = 2 [(validate.rules).string.min_len = 8];
}

message RegisterResponse {
  string access_token = 1;
  string refresh_token = 2;
  User user = 3;
}

message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
  User user = 3;
}

message ValidateTokenRequest {
  string token = 1;
}

message ValidateTokenResponse {
  bool valid = 1;
  string user_id = 2;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string access_token = 1;
  string refresh_token = 2;
}

message User {
  string id = 1;
  string email = 2;
  string nickname = 3;
}
